local library = {}

-- Serviços do Roblox
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

-- Variáveis globais
local camera = workspace.CurrentCamera
local Mouse = game.Players.LocalPlayer:GetMouse()

function library:BlurFrame(getFrame)
    local MATERIAL = "Glass"
    local binds = {}
    local root = Instance.new("Folder", camera)
    root.Name = "BlurSnox"
    
    local gToken = math.random(1, 99999999)
    
    -- Efeito de profundidade de campo
    local DepthOfField = Instance.new("DepthOfFieldEffect", Lighting)
    DepthOfField.FarIntensity = 0
    DepthOfField.FocusDistance = 51.6
    DepthOfField.InFocusRadius = 50
    DepthOfField.NearIntensity = 1
    DepthOfField.Name = "DPT_" .. gToken
    
    -- Criando frame transparente
    local frame = Instance.new("Frame")
    frame.Parent = getFrame
    frame.Size = UDim2.new(0.95, 0, 0.95, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundTransparency = 1
    
    -- Função auxiliar para gerar IDs únicos
    local function GenerateUID()
        local id = 0
        return function()
            id = id + 1
            return "neon::" .. tostring(id)
        end
    end
    local GenUid = GenerateUID()
    
    -- Função para checar valores válidos
    local function IsNotNaN(x)
        return x == x
    end
    
    while not IsNotNaN(camera:ScreenPointToRay(0, 0).Origin.x) do
        RunService.RenderStepped:Wait()
    end
    
    -- Função para desenhar quad
    local function DrawQuad(v1, v2, v3, v4, parts)
        local function DrawTriangle(a, b, c, part1, part2)
            local s1 = (a - b).magnitude
            local s2 = (b - c).magnitude
            local s3 = (c - a).magnitude
            
            local maxSide = math.max(s1, s2, s3)
            local A, B, C = (s1 == maxSide and {a, b, c}) or (s2 == maxSide and {b, c, a}) or {c, a, b}
            
            local para = ((B - A).x * (C - A).x + (B - A).y * (C - A).y + (B - A).z * (C - A).z) / (A - B).magnitude
            local perp = math.sqrt((C - A).magnitude ^ 2 - para * para)
            local dif_para = (A - B).magnitude - para
            
            local baseCFrame = CFrame.new(B, A)
            local perpCFrame = baseCFrame * CFrame.Angles(math.pi / 2, 0, 0)
            local midPoint = A + CFrame.new(A, B).lookVector * para
            
            local Needed_Look = CFrame.new(midPoint, C).lookVector
            local Top_Look = (perpCFrame).lookVector
            local angle = math.acos(Top_Look:Dot(Needed_Look))
            
            local cf0 = baseCFrame * CFrame.Angles(0, 0, angle) * CFrame.new(0, perp / 2, -(dif_para + para / 2))
            local cf1 = baseCFrame * CFrame.Angles(0, math.pi, 0) * CFrame.new(0, perp / 2, dif_para / 2)
            
            local function CreateWedge(cf, scale)
                local p = Instance.new("Part")
                p.FormFactor = "Custom"
                p.TopSurface = "Smooth"
                p.BottomSurface = "Smooth"
                p.Anchored = true
                p.CanCollide = false
                p.Material = MATERIAL
                p.Size = Vector3.new(0.2, 0.2, 0.2)
                
                local mesh = Instance.new("SpecialMesh", p)
                mesh.MeshType = Enum.MeshType.Wedge
                mesh.Scale = Vector3.new(0, scale, para / 0.2)
                p.CFrame = cf
                
                return p
            end
            
            return CreateWedge(cf0, perp / 0.2), CreateWedge(cf1, dif_para / 0.2)
        end
        
        parts[1], parts[2] = DrawTriangle(v1, v2, v3, parts[1], parts[2])
        parts[3], parts[4] = DrawTriangle(v3, v2, v4, parts[3], parts[4])
    end
    
    if binds[frame] then return binds[frame].parts end
    
    local uid = GenUid()
    local parts = {}
    local f = Instance.new("Folder", root)
    f.Name = frame.Name
    
    -- Atualiza orientação
    local function UpdateOrientation()
        local zIndex = 1 - 0.05 * frame.ZIndex
        local tl, br = frame.AbsolutePosition, frame.AbsolutePosition + frame.AbsoluteSize
        local tr, bl = Vector2.new(br.x, tl.y), Vector2.new(tl.x, br.y)
        
        DrawQuad(
            camera:ScreenPointToRay(tl.x, tl.y, zIndex).Origin,
            camera:ScreenPointToRay(tr.x, tr.y, zIndex).Origin,
            camera:ScreenPointToRay(bl.x, bl.y, zIndex).Origin,
            camera:ScreenPointToRay(br.x, br.y, zIndex).Origin,
            parts
        )
        
        for _, part in pairs(parts) do
            part.Parent = f
            part.Transparency = 0.98
            part.BrickColor = BrickColor.new("Institutional white")
        end
    end
    
    UpdateOrientation()
    RunService:BindToRenderStep(uid, 2000, UpdateOrientation)
    
    return { DepthOfField, frame }
end

return library
